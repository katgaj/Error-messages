<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../Resources/Stylesheets/Styles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1 class="Print">Communication guidelines</h1>
        <h2 style="page-break-before: avoid;">Use human-readable language</h2>
        <p>Most of the users are not interested in the technical details of the problem that occurred. They need a solution and not the description of how the error happened. If a message contains technical terms or jargon, the users get confused.</p>
        <p>Try to use simple and plain language without referring to implementation details.</p>
        <p>If there is a need to mention technical and complex details, then place them in a troubleshooting section and direct the user so that he can resolve the issue quickly.</p>
        <p>
            <img src="../Resources/Images/plain_language_1_r.png" title="plain_language image" alt="plain_language image" />
        </p>
        <h2>Be specific and concise</h2>
        <p>The longer a message, the less likely your users will read them. In fact, a study by the American Press Institute showed that shorter sentences results in greater understanding by users. So, when sentences were 14 words or fewer, users understood 90% of the messaging. When the sentences were 8 words or fewer, users understood the whole 100%.</p>
        <p>Now, sometimes it might not be possible to write a message that short, so just remember that less is more and clarity and usefulness are the most important things.</p>
        <p>
            <img src="../Resources/Images/specific_1_r.png" title="specific image" alt="specific image" />
        </p>
        <h2>Give solutions</h2>
        <p>When the user has to stop their task in order to correct an error, it defeats the foundation of user-centered design — help your audience get through a task efficiently and effectively.</p>
        <p>Effective error message design not only informs users that a problem occurred and explains why it happened, but it also provides the next steps for users so they can fix the problem. The next step can be contextually-relevant actions.</p>
        <p>Actions are possible routes to solve the problem. A message can contain one or more actions for the user.</p>
        <p>
            <img src="../Resources/Images/solution_2_r.png" title="solution_2 image" alt="solution_2 image" />
        </p>
        <p>In the below scenario, the user may feel frustrated that the product is not available. However, the solution is given by putting a visible orange “notify me” tab under the product</p>
        <p>
            <img src="../Resources/Images/out_of_stock_r.png" title="out_of_stock image" alt="out_of_stock image" />
        </p>
        <p>Also, compare these two messages:</p>
        <p>
            <img src="../Resources/Images/wrong_2_r.png" title="wrong_2 image" alt="wrong_2 image" />
        </p>
        <p>
            <img src="../Resources/Images/good_podpowiedzi_r.png" title="good_podpowiedzi image" alt="good_podpowiedzi image" />
        </p>
        <p>The first one only communicates about the error without any explanation of what went wrong, what is missing and how to enter the correct data. The second one, on the other hand, gives the solution first, and then informs that the error occurred.</p>
        <h2>Use confirmative sentences</h2>
        <p>As Wojciech Aleksander explains in his book “UX Writing …” sometimes it is better to use confirmative sentences instead of negative ones. When users see a confirmative statement in an error message, it assures them that their action has been understood and will be processed accordingly. This builds confidence in the system and reduces anxiety about whether their input was received correctly.</p>
        <p>Users do not have to guess whether their input was valid or not; instead, they receive immediate feedback that guides them on the next steps. This can help alleviate frustration and encourage users to continue interacting with the system.</p>
        <p>
            <img src="../Resources/Images/confirmative_1_r.png" title="confirmative_1 image" alt="confirmative_1 image" />
        </p>
        <h2>Provide helpful constraints</h2>
        <p>You can avoid many errors through better design. UI elements like sliders and date and time pickers should be constrained to valid values. For example, for an experience that lets you book with a hotel date picker, you should disable the dates in the past. This limits scenarios in which the users may face an error message.</p>
        <h2>
            <p>
                <img src="../Resources/Images/constraints_r.png" title="constraints image" alt="constraints image" />
            </p>
            <h2>Correct errors automatically</h2>
        </h2>
        <p>If the problem can be corrected automatically, it should be corrected automatically. For example, the search form should automatically correct mistyping.</p>
        <p>
            <p>
                <img src="../Resources/Images/correct_errors_r.png" title="correct_errors image" alt="correct_errors image" />
            </p>
        </p>
        <h2>Call to action</h2>
        <p>Atlassian writing guidelines suggest to use imperative verbs such as “Save”, “Remove”, “Create”, or “Close,' when an error message invokes a choice. An option to dismiss or cancel lets people feel reassured that they can opt out.</p>
        <p>
            <p>
                <img src="../Resources/Images/cta_2_r.png" title="call_to_action image" alt="call_to_action image" />
            </p>
        </p>
        <h2> Provide examples of correct input</h2>
        <p>A clear set of guidelines of what a correct input is can be useful if the user is not acquainted with specific terminology. Adding a hint under the label and providing an example of correct input, makes the whole process of filling the form user-friendly:</p>
        <p>
            <img src="../Resources/Images/correct_input_1_r.png" title="correct_input image" alt="correct_input image" />
        </p>
    </body>
</html>